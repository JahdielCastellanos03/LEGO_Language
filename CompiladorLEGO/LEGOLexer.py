# Generated from LEGO.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,4,19,285,8,19,11,19,12,19,286,1,20,1,20,5,20,291,8,20,
        10,20,12,20,294,9,20,1,21,1,21,5,21,298,8,21,10,21,12,21,301,9,21,
        1,21,1,21,1,22,1,22,1,22,1,22,5,22,309,8,22,10,22,12,22,312,9,22,
        3,22,314,8,22,1,22,1,22,1,23,4,23,319,8,23,11,23,12,23,320,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,299,0,29,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,1,0,4,1,0,48,57,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,339,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,71,1,0,0,
        0,5,80,1,0,0,0,7,93,1,0,0,0,9,104,1,0,0,0,11,107,1,0,0,0,13,112,
        1,0,0,0,15,125,1,0,0,0,17,140,1,0,0,0,19,155,1,0,0,0,21,169,1,0,
        0,0,23,184,1,0,0,0,25,200,1,0,0,0,27,218,1,0,0,0,29,233,1,0,0,0,
        31,247,1,0,0,0,33,267,1,0,0,0,35,279,1,0,0,0,37,281,1,0,0,0,39,284,
        1,0,0,0,41,288,1,0,0,0,43,295,1,0,0,0,45,304,1,0,0,0,47,318,1,0,
        0,0,49,324,1,0,0,0,51,326,1,0,0,0,53,328,1,0,0,0,55,330,1,0,0,0,
        57,332,1,0,0,0,59,60,5,76,0,0,60,61,5,69,0,0,61,62,5,71,0,0,62,63,
        5,79,0,0,63,64,5,95,0,0,64,65,5,73,0,0,65,66,5,78,0,0,66,67,5,73,
        0,0,67,68,5,67,0,0,68,69,5,73,0,0,69,70,5,79,0,0,70,2,1,0,0,0,71,
        72,5,76,0,0,72,73,5,69,0,0,73,74,5,71,0,0,74,75,5,79,0,0,75,76,5,
        95,0,0,76,77,5,70,0,0,77,78,5,73,0,0,78,79,5,78,0,0,79,4,1,0,0,0,
        80,81,5,77,0,0,81,82,5,79,0,0,82,83,5,83,0,0,83,84,5,84,0,0,84,85,
        5,82,0,0,85,86,5,65,0,0,86,87,5,82,0,0,87,88,5,95,0,0,88,89,5,76,
        0,0,89,90,5,69,0,0,90,91,5,71,0,0,91,92,5,79,0,0,92,6,1,0,0,0,93,
        94,5,80,0,0,94,95,5,69,0,0,95,96,5,68,0,0,96,97,5,73,0,0,97,98,5,
        82,0,0,98,99,5,95,0,0,99,100,5,76,0,0,100,101,5,69,0,0,101,102,5,
        71,0,0,102,103,5,79,0,0,103,8,1,0,0,0,104,105,5,83,0,0,105,106,5,
        73,0,0,106,10,1,0,0,0,107,108,5,83,0,0,108,109,5,73,0,0,109,110,
        5,78,0,0,110,111,5,79,0,0,111,12,1,0,0,0,112,113,5,82,0,0,113,114,
        5,69,0,0,114,115,5,80,0,0,115,116,5,69,0,0,116,117,5,84,0,0,117,
        118,5,73,0,0,118,119,5,82,0,0,119,120,5,95,0,0,120,121,5,76,0,0,
        121,122,5,69,0,0,122,123,5,71,0,0,123,124,5,79,0,0,124,14,1,0,0,
        0,125,126,5,77,0,0,126,127,5,73,0,0,127,128,5,69,0,0,128,129,5,78,
        0,0,129,130,5,84,0,0,130,131,5,82,0,0,131,132,5,65,0,0,132,133,5,
        83,0,0,133,134,5,95,0,0,134,135,5,65,0,0,135,136,5,80,0,0,136,137,
        5,73,0,0,137,138,5,76,0,0,138,139,5,79,0,0,139,16,1,0,0,0,140,141,
        5,65,0,0,141,142,5,71,0,0,142,143,5,82,0,0,143,144,5,69,0,0,144,
        145,5,71,0,0,145,146,5,65,0,0,146,147,5,82,0,0,147,148,5,95,0,0,
        148,149,5,66,0,0,149,150,5,76,0,0,150,151,5,79,0,0,151,152,5,81,
        0,0,152,153,5,85,0,0,153,154,5,69,0,0,154,18,1,0,0,0,155,156,5,81,
        0,0,156,157,5,85,0,0,157,158,5,73,0,0,158,159,5,84,0,0,159,160,5,
        65,0,0,160,161,5,82,0,0,161,162,5,95,0,0,162,163,5,66,0,0,163,164,
        5,76,0,0,164,165,5,79,0,0,165,166,5,81,0,0,166,167,5,85,0,0,167,
        168,5,69,0,0,168,20,1,0,0,0,169,170,5,65,0,0,170,171,5,80,0,0,171,
        172,5,73,0,0,172,173,5,76,0,0,173,174,5,65,0,0,174,175,5,82,0,0,
        175,176,5,95,0,0,176,177,5,66,0,0,177,178,5,76,0,0,178,179,5,79,
        0,0,179,180,5,81,0,0,180,181,5,85,0,0,181,182,5,69,0,0,182,183,5,
        83,0,0,183,22,1,0,0,0,184,185,5,68,0,0,185,186,5,73,0,0,186,187,
        5,86,0,0,187,188,5,73,0,0,188,189,5,68,0,0,189,190,5,73,0,0,190,
        191,5,82,0,0,191,192,5,95,0,0,192,193,5,66,0,0,193,194,5,76,0,0,
        194,195,5,79,0,0,195,196,5,81,0,0,196,197,5,85,0,0,197,198,5,69,
        0,0,198,199,5,83,0,0,199,24,1,0,0,0,200,201,5,80,0,0,201,202,5,79,
        0,0,202,203,5,84,0,0,203,204,5,69,0,0,204,205,5,78,0,0,205,206,5,
        67,0,0,206,207,5,73,0,0,207,208,5,65,0,0,208,209,5,82,0,0,209,210,
        5,95,0,0,210,211,5,66,0,0,211,212,5,76,0,0,212,213,5,79,0,0,213,
        214,5,81,0,0,214,215,5,85,0,0,215,216,5,69,0,0,216,217,5,83,0,0,
        217,26,1,0,0,0,218,219,5,77,0,0,219,220,5,65,0,0,220,221,5,83,0,
        0,221,222,5,95,0,0,222,223,5,71,0,0,223,224,5,82,0,0,224,225,5,65,
        0,0,225,226,5,78,0,0,226,227,5,68,0,0,227,228,5,69,0,0,228,229,5,
        95,0,0,229,230,5,81,0,0,230,231,5,85,0,0,231,232,5,69,0,0,232,28,
        1,0,0,0,233,234,5,77,0,0,234,235,5,65,0,0,235,236,5,83,0,0,236,237,
        5,95,0,0,237,238,5,80,0,0,238,239,5,69,0,0,239,240,5,81,0,0,240,
        241,5,85,0,0,241,242,5,69,0,0,242,243,5,95,0,0,243,244,5,81,0,0,
        244,245,5,85,0,0,245,246,5,69,0,0,246,30,1,0,0,0,247,248,5,69,0,
        0,248,249,5,83,0,0,249,250,5,84,0,0,250,251,5,69,0,0,251,252,5,95,
        0,0,252,253,5,66,0,0,253,254,5,76,0,0,254,255,5,79,0,0,255,256,5,
        81,0,0,256,257,5,85,0,0,257,258,5,69,0,0,258,259,5,95,0,0,259,260,
        5,73,0,0,260,261,5,71,0,0,261,262,5,85,0,0,262,263,5,65,0,0,263,
        264,5,76,0,0,264,265,5,95,0,0,265,266,5,65,0,0,266,32,1,0,0,0,267,
        268,5,68,0,0,268,269,5,73,0,0,269,270,5,70,0,0,270,271,5,69,0,0,
        271,272,5,82,0,0,272,273,5,69,0,0,273,274,5,78,0,0,274,275,5,84,
        0,0,275,276,5,69,0,0,276,277,5,95,0,0,277,278,5,65,0,0,278,34,1,
        0,0,0,279,280,5,123,0,0,280,36,1,0,0,0,281,282,5,125,0,0,282,38,
        1,0,0,0,283,285,7,0,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,
        1,0,0,0,286,287,1,0,0,0,287,40,1,0,0,0,288,292,7,1,0,0,289,291,7,
        2,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,
        0,0,0,293,42,1,0,0,0,294,292,1,0,0,0,295,299,5,34,0,0,296,298,9,
        0,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,300,1,0,0,0,299,297,1,
        0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,5,34,0,0,303,44,1,
        0,0,0,304,313,5,91,0,0,305,310,3,39,19,0,306,307,5,44,0,0,307,309,
        3,39,19,0,308,306,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,
        1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,313,305,1,0,0,0,313,314,
        1,0,0,0,314,315,1,0,0,0,315,316,5,93,0,0,316,46,1,0,0,0,317,319,
        7,3,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,
        1,0,0,0,321,322,1,0,0,0,322,323,6,23,0,0,323,48,1,0,0,0,324,325,
        5,40,0,0,325,50,1,0,0,0,326,327,5,41,0,0,327,52,1,0,0,0,328,329,
        5,61,0,0,329,54,1,0,0,0,330,331,5,59,0,0,331,56,1,0,0,0,332,333,
        5,58,0,0,333,58,1,0,0,0,7,0,286,292,299,310,313,320,1,6,0,0
    ]

class LEGOLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LEGO_INICIO = 1
    LEGO_FIN = 2
    MOSTRAR_LEGO = 3
    PEDIR_LEGO = 4
    SI = 5
    SINO = 6
    REPETIR_LEGO = 7
    MIENTRAS_APILO = 8
    AGREGAR_BLOQUE = 9
    QUITAR_BLOQUE = 10
    APILAR_BLOQUES = 11
    DIVIDIR_BLOQUES = 12
    POTENCIAR_BLOQUES = 13
    MAS_GRANDE_QUE = 14
    MAS_PEQUE_QUE = 15
    ESTE_BLOQUE_IGUAL_A = 16
    DIFERENTE_A = 17
    BLOQUE_ABRIR = 18
    BLOQUE_CERRAR = 19
    NUMBER = 20
    IDENTIFICADOR = 21
    PALABRA_BLOQUE = 22
    MUCHOS_BLOQUES = 23
    WS = 24
    LPAREN = 25
    RPAREN = 26
    EQUAL = 27
    SEMICOLON = 28
    COLON = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'LEGO_INICIO'", "'LEGO_FIN'", "'MOSTRAR_LEGO'", "'PEDIR_LEGO'", 
            "'SI'", "'SINO'", "'REPETIR_LEGO'", "'MIENTRAS_APILO'", "'AGREGAR_BLOQUE'", 
            "'QUITAR_BLOQUE'", "'APILAR_BLOQUES'", "'DIVIDIR_BLOQUES'", 
            "'POTENCIAR_BLOQUES'", "'MAS_GRANDE_QUE'", "'MAS_PEQUE_QUE'", 
            "'ESTE_BLOQUE_IGUAL_A'", "'DIFERENTE_A'", "'{'", "'}'", "'('", 
            "')'", "'='", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "LEGO_INICIO", "LEGO_FIN", "MOSTRAR_LEGO", "PEDIR_LEGO", "SI", 
            "SINO", "REPETIR_LEGO", "MIENTRAS_APILO", "AGREGAR_BLOQUE", 
            "QUITAR_BLOQUE", "APILAR_BLOQUES", "DIVIDIR_BLOQUES", "POTENCIAR_BLOQUES", 
            "MAS_GRANDE_QUE", "MAS_PEQUE_QUE", "ESTE_BLOQUE_IGUAL_A", "DIFERENTE_A", 
            "BLOQUE_ABRIR", "BLOQUE_CERRAR", "NUMBER", "IDENTIFICADOR", 
            "PALABRA_BLOQUE", "MUCHOS_BLOQUES", "WS", "LPAREN", "RPAREN", 
            "EQUAL", "SEMICOLON", "COLON" ]

    ruleNames = [ "LEGO_INICIO", "LEGO_FIN", "MOSTRAR_LEGO", "PEDIR_LEGO", 
                  "SI", "SINO", "REPETIR_LEGO", "MIENTRAS_APILO", "AGREGAR_BLOQUE", 
                  "QUITAR_BLOQUE", "APILAR_BLOQUES", "DIVIDIR_BLOQUES", 
                  "POTENCIAR_BLOQUES", "MAS_GRANDE_QUE", "MAS_PEQUE_QUE", 
                  "ESTE_BLOQUE_IGUAL_A", "DIFERENTE_A", "BLOQUE_ABRIR", 
                  "BLOQUE_CERRAR", "NUMBER", "IDENTIFICADOR", "PALABRA_BLOQUE", 
                  "MUCHOS_BLOQUES", "WS", "LPAREN", "RPAREN", "EQUAL", "SEMICOLON", 
                  "COLON" ]

    grammarFileName = "LEGO.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


